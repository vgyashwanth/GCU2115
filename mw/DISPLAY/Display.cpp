/*
 * Display.cpp
 *
 *  Created on: Jul 1, 2021
 *      Author: pramod.ranade
 */

#include "Display.h"

static const uint8_t gau8FontVerdana[96][11] =         //  96x11
{
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03},       //  Char Space  Width 3     32
    {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x80,0x00,0x02},       //  Char !      Width 2     33
    {0x00,0xA0,0xA0,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x04},       //  Char "      Width 4     34
    {0x00,0x14,0x14,0x7E,0x28,0x28,0xFC,0x50,0x50,0x00,0x08},       //  Char #      Width 8     35
    {0x00,0x20,0x70,0xA8,0xA0,0x70,0x28,0xA8,0x70,0x20,0x06},       //  Char $      Width 6     36
    {0x00,0x44,0xA8,0x48,0x10,0x24,0x2A,0x44,0x00,0x00,0x08},       //  Char %      Width 8     37
    {0x00,0x60,0x90,0x90,0x60,0x94,0x88,0x94,0x64,0x00,0x07},       //  Char &      Width 7     38
    {0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02},       //  Char '      Width 2     39
    {0x20,0x40,0x40,0x80,0x80,0x80,0x80,0x40,0x40,0x20,0x04},       //  Char (      Width 4     40
    {0x80,0x40,0x40,0x20,0x20,0x20,0x20,0x40,0x40,0x80,0x04},       //  Char )      Width 4     41
    {0x20,0xA8,0x70,0xA8,0x20,0x00,0x00,0x00,0x00,0x00,0x06},       //  Char *      Width 6     42
    {0x00,0x00,0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00,0x06},       //  Char +      Width 6     43
    {0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x80,0x03},       //  Char ,      Width 3     44
    {0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x04},       //  Char -      Width 5     45
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x02},       //  Char .      Width 2     46
    {0x00,0x20,0x20,0x40,0x40,0x40,0x40,0x80,0x80,0x00,0x04},       //  Char /      Width 4     47
    {0x00,0x60,0x90,0x90,0x90,0x90,0x90,0x90,0x60,0x00,0x05},       //  Char 0      Width 5     48
    {0x00,0x40,0xC0,0x40,0x40,0x40,0x40,0x40,0xE0,0x00,0x04},       //  Char 1      Width 4     49
    {0x00,0x60,0x90,0x10,0x20,0x40,0x80,0x80,0xF0,0x00,0x05},       //  Char 2      Width 5     50
    {0x00,0x60,0x90,0x10,0x60,0x10,0x10,0x90,0x60,0x00,0x05},       //  Char 3      Width 5     51
    {0x00,0x10,0x30,0x50,0x50,0x90,0xF8,0x10,0x10,0x00,0x06},       //  Char 4      Width 6     52
    {0x00,0xF0,0x80,0x80,0xE0,0x10,0x10,0x90,0x60,0x00,0x05},       //  Char 5      Width 5     53
    {0x00,0x20,0x40,0x80,0xE0,0x90,0x90,0x90,0x60,0x00,0x05},       //  Char 6      Width 5     54
    {0x00,0xF0,0x10,0x10,0x20,0x20,0x40,0x40,0x40,0x00,0x05},       //  Char 7      Width 5     55
    {0x00,0x60,0x90,0x90,0x60,0x90,0x90,0x90,0x60,0x00,0x05},       //  Char 8      Width 5     56
    {0x00,0x60,0x90,0x90,0x90,0x70,0x10,0x20,0x40,0x00,0x05},       //  Char 9      Width 5     57
    {0x00,0x00,0x00,0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x03},       //  Char :      Width 2     58
    {0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x40,0x40,0x80,0x03},       //  Char ;      Width 3     59
    {0x00,0x00,0x00,0x18,0x60,0x80,0x60,0x18,0x00,0x00,0x06},       //  Char <      Width 6     60
    {0x00,0x00,0x00,0x00,0xF0,0x00,0xF0,0x00,0x00,0x00,0x05},       //  Char =      Width 5     61
    {0x00,0x00,0x00,0xC0,0x30,0x08,0x30,0xC0,0x00,0x00,0x06},       //  Char >      Width 6     62
    {0x00,0xE0,0x10,0x10,0x20,0x40,0x40,0x00,0x40,0x00,0x05},       //  Char ?      Width 5     63
    {0x00,0x38,0x44,0x92,0xAA,0xAA,0x9C,0x40,0x3C,0x00,0x08},       //  Char @      Width 8     64
    {0x00,0x30,0x30,0x48,0x48,0x48,0xFC,0x84,0x84,0x00,0x07},       //  Char A      Width 7     65
    {0x00,0xF0,0x88,0x88,0xF0,0x88,0x88,0x88,0xF0,0x00,0x06},       //  Char B      Width 6     66
    {0x00,0x38,0x44,0x80,0x80,0x80,0x80,0x44,0x38,0x00,0x07},       //  Char C      Width 7     67
    {0x00,0xF0,0x88,0x84,0x84,0x84,0x84,0x88,0xF0,0x00,0x07},       //  Char D      Width 7     68
    {0x00,0xF8,0x80,0x80,0xF8,0x80,0x80,0x80,0xF8,0x00,0x06},       //  Char E      Width 6     69
    {0x00,0xF0,0x80,0x80,0xF0,0x80,0x80,0x80,0x80,0x00,0x05},       //  Char F      Width 5     70
    {0x00,0x38,0x40,0x80,0x80,0x98,0x88,0x48,0x38,0x00,0x06},       //  Char G      Width 6     71
    {0x00,0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x88,0x00,0x06},       //  Char H      Width 6     72
    {0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0xE0,0x00,0x04},       //  Char I      Width 4     73
    {0x00,0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,0x04},       //  Char J      Width 4     74
    {0x00,0x88,0x90,0xA0,0xC0,0xC0,0xA0,0x90,0x88,0x00,0x06},       //  Char K      Width 6     75
    {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00,0x06},       //  Char L      Width 6     76
    {0x00,0xC6,0xC6,0xAA,0xAA,0x92,0x92,0x82,0x82,0x00,0x08},       //  Char M      Width 8     77
    {0x00,0x84,0xC4,0xA4,0xA4,0x94,0x94,0x8C,0x84,0x00,0x07},       //  Char N      Width 7     78
    {0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x08},       //  Char O      Width 8     79
    {0x00,0xF0,0x88,0x88,0x88,0xF0,0x80,0x80,0x80,0x00,0x06},       //  Char P      Width 6     80
    {0x00,0x38,0x44,0x82,0x82,0x82,0x8A,0x44,0x3C,0x02,0x08},       //  Char Q      Width 8     81
    {0x00,0xF0,0x88,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00,0x06},       //  Char R      Width 6     82
    {0x00,0x70,0x88,0x80,0x60,0x10,0x08,0x88,0x70,0x00,0x06},       //  Char S      Width 6     83
    {0x00,0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x06},       //  Char T      Width 6     84
    {0x00,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00,0x06},       //  Char U      Width 6     85
    {0x00,0x88,0x88,0x88,0x50,0x50,0x50,0x20,0x20,0x00,0x06},       //  Char V      Width 7     86
    {0x00,0x82,0x82,0x92,0x54,0x54,0x54,0x28,0x28,0x00,0x08},       //  Char W      Width 8     87
    {0x00,0x84,0x84,0x48,0x30,0x30,0x48,0x84,0x84,0x00,0x07},       //  Char X      Width 7     88
    {0x00,0x88,0x88,0x50,0x50,0x20,0x20,0x20,0x20,0x00,0x06},       //  Char Y      Width 6     89
    {0x00,0xF8,0x08,0x10,0x20,0x20,0x40,0x80,0xF8,0x00,0x06},       //  Char Z      Width 6     90
    {0x00,0xC0,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xC0,0x03},       //  Char [      Width 3     91
    {0x00,0x80,0x80,0x40,0x40,0x40,0x40,0x20,0x20,0x00,0x04},       //  Char \      Width 4     92
    {0x00,0xC0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0xC0,0x03},       //  Char ]      Width 3     93
    {0x00,0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x06},       //  Char ^      Width 6     94
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x06},       //  Char _      Width 6     95
    {0x40,0xA0,0xA0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x04},       //  Char `      Width 4     96
    {0x00,0x00,0x00,0x00,0x60,0x10,0x70,0x90,0x70,0x00,0x05},       //  Char a      Width 5     97
    {0x00,0x80,0x80,0x80,0xE0,0x90,0x90,0x90,0xE0,0x00,0x05},       //  Char b      Width 5     98
    {0x00,0x00,0x00,0x00,0x70,0x80,0x80,0x80,0x70,0x00,0x05},       //  Char c      Width 5     99
    {0x00,0x10,0x10,0x10,0x70,0x90,0x90,0x90,0x70,0x00,0x05},       //  Char d      Width 5     100
    {0x00,0x00,0x00,0x00,0x60,0x90,0xF0,0x80,0x70,0x00,0x05},       //  Char e      Width 5     101
    {0x00,0x30,0x40,0x40,0xF0,0x40,0x40,0x40,0x40,0x00,0x05},       //  Char f      Width 5     102
    {0x00,0x00,0x00,0x00,0x70,0x90,0x90,0x70,0x10,0x60,0x05},       //  Char g      Width 5     103
    {0x00,0x80,0x80,0x80,0xE0,0x90,0x90,0x90,0x90,0x00,0x05},       //  Char h      Width 5     104
    {0x00,0x00,0x80,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x02},       //  Char i      Width 2     105
    {0x00,0x00,0x40,0x00,0x40,0x40,0x40,0x40,0x40,0x80,0x03},       //  Char j      Width 3     106
    {0x00,0x80,0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00,0x05},       //  Char k      Width 5     107
    {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x02},       //  Char l      Width 3     108
    {0x00,0x00,0x00,0x00,0xF0,0xA8,0xA8,0xA8,0xA8,0x00,0x06},       //  Char m      Width 6     109
    {0x00,0x00,0x00,0x00,0xE0,0x90,0x90,0x90,0x90,0x00,0x05},       //  Char n      Width 5     110
    {0x00,0x00,0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00,0x06},       //  Char o      Width 6     111
    {0x00,0x00,0x00,0x00,0xE0,0x90,0x90,0xE0,0x80,0x80,0x05},       //  Char p      Width 5     112
    {0x00,0x00,0x00,0x00,0x70,0x90,0x90,0x70,0x10,0x10,0x05},       //  Char q      Width 5     113
    {0x00,0x00,0x00,0x00,0xB0,0xC0,0x80,0x80,0x80,0x00,0x05},       //  Char r      Width 5     114
    {0x00,0x00,0x00,0x00,0x70,0x80,0x60,0x10,0xE0,0x00,0x05},       //  Char s      Width 5     115
    {0x00,0x40,0x40,0x40,0xF0,0x40,0x40,0x40,0x30,0x00,0x05},       //  Char t      Width 5     116
    {0x00,0x00,0x00,0x00,0x90,0x90,0x90,0x90,0xE0,0x00,0x05},       //  Char u      Width 5     117
    {0x00,0x00,0x00,0x00,0x88,0x88,0x50,0x50,0x20,0x00,0x06},       //  Char v      Width 6     118
    {0x00,0x00,0x00,0x00,0x82,0x92,0xAA,0x6C,0x44,0x00,0x08},       //  Char w      Width 8     119
    {0x00,0x00,0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00,0x06},       //  Char x      Width 6     120
    {0x00,0x00,0x00,0x00,0x88,0x50,0x50,0x20,0x20,0x40,0x06},       //  Char y      Width 6     121
    {0x00,0x00,0x00,0x00,0xF0,0x10,0x60,0x80,0xF0,0x00,0x05},       //  Char z      Width 5     122
    {0x20,0x40,0x40,0x40,0x80,0x80,0x40,0x40,0x40,0x20,0x04},       //  Char {      Width 4     123
    {0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x02},       //  Char |      Width 2     124
    {0x80,0x40,0x40,0x40,0x20,0x20,0x40,0x40,0x40,0x80,0x04},       //  Char }      Width 4     125
    {0x00,0x00,0x00,0x00,0x40,0xA8,0x10,0x00,0x00,0x00,0x06},       //  Char ~      Width 6     126
    {0x00,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0xE0,0x00,0x04}        //  Char []     Width 4     127
};
static const uint8_t gau8FontArialBold[96][11] =       //  96x11
{
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03},       //  Char Space  Width 3     32
    {0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0xC0,0xC0,0x00,0x03},       //  Char !      Width 3     33
    {0x00,0xD0,0xD0,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x06},       //  Char "      Width 6     34
    {0x00,0x24,0x24,0xFC,0x48,0x48,0xFC,0x90,0x90,0x00,0x07},       //  Char #      Width 7     35
    {0x20,0x70,0xA8,0xA0,0xF0,0x78,0x28,0xA8,0x70,0x20,0x06},       //  Char $      Width 6     36
    {0x00,0x66,0xA6,0xCC,0x18,0x18,0x33,0x65,0x66,0x00,0x08},       //  Char %      Width 8     37
    {0x00,0x38,0x6C,0x6C,0x30,0x7A,0xCE,0xCC,0x7E,0x00,0x08},       //  Char &      Width 8     38
    {0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03},       //  Char '      Width 3     39
    {0x00,0x20,0x60,0xC0,0xC0,0xC0,0xC0,0xC0,0x60,0x20,0x04},       //  Char (      Width 4     40
    {0x00,0x80,0xC0,0x60,0x60,0x60,0x60,0x60,0xC0,0x80,0x04},       //  Char )      Width 4     41
    {0x00,0x40,0xE0,0x40,0xA0,0x00,0x00,0x00,0x00,0x00,0x04},       //  Char *      Width 4     42
    {0x00,0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00,0x00,0x06},       //  Char +      Width 6     43
    {0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x40,0x80,0x03},       //  Char ,      Width 4     44
    {0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x05},       //  Char -      Width 5     45
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x03},       //  Char .      Width 3     46
    {0x00,0x20,0x20,0x40,0x40,0x40,0x40,0x80,0x80,0x00,0x04},       //  Char /      Width 4     47
    {0x00,0x70,0xD8,0xD8,0xD8,0xD8,0xD8,0xD8,0x70,0x00,0x06},       //  Char 0      Width 6     48
    {0x00,0x30,0x70,0xF0,0xB0,0x30,0x30,0x30,0x30,0x00,0x05},       //  Char 1      Width 5     49
    {0x00,0x70,0xD8,0x18,0x18,0x30,0x60,0xC0,0xF8,0x00,0x06},       //  Char 2      Width 6     50
    {0x00,0x70,0xD8,0x18,0x30,0x18,0x18,0xD8,0x70,0x00,0x06},       //  Char 3      Width 6     51
    {0x00,0x18,0x38,0x58,0x58,0x98,0xFC,0x18,0x18,0x00,0x07},       //  Char 4      Width 7     52
    {0x00,0x78,0x60,0xC0,0xF0,0x18,0x18,0xD8,0x70,0x00,0x06},       //  Char 5      Width 6     53
    {0x00,0x70,0xD8,0xC0,0xF0,0xD8,0xD8,0xD8,0x70,0x00,0x06},       //  Char 6      Width 6     54
    {0x00,0xF8,0x18,0x30,0x30,0x60,0x60,0x60,0x60,0x00,0x06},       //  Char 7      Width 6     55
    {0x00,0x70,0xD8,0xD8,0x70,0xD8,0xD8,0xD8,0x70,0x00,0x06},       //  Char 8      Width 6     56
    {0x00,0x70,0xD8,0xD8,0xD8,0x78,0x18,0xD8,0x70,0x00,0x06},       //  Char 9      Width 6     57
    {0x00,0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x00,0x00,0x03},       //  Char :      Width 3     58
    {0x00,0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x40,0x80,0x03},       //  Char ;      Width 3     59
    {0x00,0x00,0x08,0x30,0xC0,0xC0,0x30,0x08,0x00,0x00,0x06},       //  Char <      Width 6     60
    {0x00,0x00,0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00,0x06},       //  Char =      Width 6     61
    {0x00,0x00,0x80,0x60,0x18,0x18,0x60,0x80,0x00,0x00,0x06},       //  Char >      Width 6     62
    {0x00,0x70,0xD8,0x18,0x30,0x60,0x00,0x60,0x60,0x00,0x06},       //  Char ?      Width 6     63
    {0x38,0x44,0xBA,0xAA,0xAA,0xAA,0xBE,0x40,0x3C,0x00,0x08},       //  Char @      Width 8     64
    {0x00,0x38,0x38,0x6C,0x6C,0x6C,0xFE,0xC6,0xC6,0x00,0x08},       //  Char A      Width 8     65
    {0x00,0xF8,0xCC,0xCC,0xF8,0xCC,0xCC,0xCC,0xF8,0x00,0x07},       //  Char B      Width 7     66
    {0x00,0x3C,0x66,0xC0,0xC0,0xC0,0xC0,0x66,0x3C,0x00,0x08},       //  Char C      Width 8     67
    {0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xF8,0x00,0x07},       //  Char D      Width 5     68
    {0x00,0xF8,0xC0,0xC0,0xF8,0xC0,0xC0,0xC0,0xF8,0x00,0x06},       //  Char E      Width 6     69
    {0x00,0xF8,0xC0,0xC0,0xF8,0xC0,0xC0,0xC0,0xC0,0x00,0x06},       //  Char F      Width 6     70
    {0x00,0x3C,0x66,0xC0,0xC0,0xCE,0xC6,0x66,0x3C,0x00,0x08},       //  Char G      Width 8     71
    {0x00,0xCC,0xCC,0xCC,0xFC,0xFC,0xCC,0xCC,0xCC,0x00,0x07},       //  Char H      Width 7     72
    {0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x03},       //  Char I      Width 3     73
    {0x00,0x18,0x18,0x18,0x18,0x18,0x18,0xD8,0x70,0x00,0x06},       //  Char J      Width 6     74
    {0x00,0xCC,0xD8,0xD8,0xF0,0xF8,0xD8,0xCC,0xCC,0x00,0x07},       //  Char K      Width 7     75
    {0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xFC,0x00,0x07},       //  Char L      Width 7     76
    {0x00,0xC6,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0x00,0x08},       //  Char M      Width 8     77
    {0x00,0xCC,0xCC,0xEC,0xEC,0xDC,0xDC,0xCC,0xCC,0x00,0x07},       //  Char N      Width 7     78
    {0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00,0x08},       //  Char O      Width 8     79
    {0x00,0xF8,0xCC,0xCC,0xCC,0xF8,0xC0,0xC0,0xC0,0x00,0x07},       //  Char P      Width 7     80
    {0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xD6,0x6C,0x3C,0x02,0x08},       //  Char Q      Width 8     81
    {0x00,0xF8,0xCC,0xCC,0xCC,0xF8,0xD8,0xCC,0xC6,0x00,0x08},       //  Char R      Width 8     82
    {0x00,0x78,0xCC,0xC0,0xF0,0x3C,0x0C,0xCC,0x78,0x00,0x07},       //  Char S      Width 7     83
    {0x00,0xFC,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x00,0x07},       //  Char T      Width 7     84
    {0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x07},       //  Char U      Width 7     85
    {0x00,0xC6,0xC6,0x6C,0x6C,0x6C,0x6C,0x38,0x38,0x00,0x08},       //  Char V      Width 8     86
    {0x00,0xC6,0xC6,0xC6,0xD6,0xFE,0xFE,0x6C,0x44,0x00,0x08},       //  Char W      Width 8     87
    {0x00,0xCC,0xCC,0x78,0x30,0x30,0x78,0xCC,0xCC,0x00,0x07},       //  Char X      Width 7     88
    {0x00,0xCC,0xCC,0x48,0x48,0x30,0x30,0x30,0x30,0x00,0x07},       //  Char Y      Width 7     89
    {0x00,0xFC,0x0C,0x18,0x30,0x30,0x60,0xC0,0xFC,0x00,0x07},       //  Char Z      Width 7     90
    {0x00,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xE0,0x04},       //  Char [      Width 4     91
    {0x00,0x80,0x80,0x40,0x40,0x40,0x40,0x20,0x20,0x00,0x04},       //  Char \      Width 4     92
    {0x00,0xE0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xE0,0x04},       //  Char ]      Width 4     93
    {0x00,0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x06},       //  Char ^      Width 6     94
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x07},       //  Char _      Width 7     95
    {0x40,0xA0,0xA0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x04},       //  Char `      Width 4     96
    {0x00,0x00,0x00,0x70,0x98,0x78,0xD8,0xD8,0x78,0x00,0x06},       //  Char a      Width 6     97
    {0x00,0xC0,0xC0,0xF8,0xCC,0xCC,0xCC,0xCC,0xF8,0x00,0x07},       //  Char b      Width 7     98
    {0x00,0x00,0x00,0x70,0xD8,0xC0,0xC0,0xD8,0x70,0x00,0x06},       //  Char c      Width 6     99
    {0x00,0x0C,0x0C,0x7C,0xCC,0xCC,0xCC,0xCC,0x7C,0x00,0x07},       //  Char d      Width 7     100
    {0x00,0x00,0x00,0x78,0xCC,0xFC,0xC0,0xCC,0x78,0x00,0x07},       //  Char e      Width 7     101
    {0x00,0x70,0xC0,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x05},       //  Char f      Width 5     102
    {0x00,0x00,0x00,0x7C,0xCC,0xCC,0x7C,0x0C,0x78,0x00,0x07},       //  Char g      Width 7     103
    {0x00,0xC0,0xC0,0xF8,0xCC,0xCC,0xCC,0xCC,0xCC,0x00,0x07},       //  Char h      Width 7     104
    {0x00,0xC0,0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x03},       //  Char i      Width 3     105
    {0x00,0x60,0x00,0x60,0x60,0x60,0x60,0x60,0xE0,0x00,0x04},       //  Char j      Width 4     106
    {0x00,0xC0,0xC0,0xCC,0xD8,0xF0,0xF8,0xD8,0xCC,0x00,0x07},       //  Char k      Width 7     107
    {0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x03},       //  Char l      Width 3     108
    {0x00,0x00,0x00,0xFC,0xD6,0xD6,0xD6,0xD6,0xD6,0x00,0x08},       //  Char m      Width 8     109
    {0x00,0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0xCC,0x00,0x07},       //  Char n      Width 7     110
    {0x00,0x00,0x00,0x78,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x07},       //  Char o      Width 7     111
    {0x00,0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xF8,0xC0,0xC0,0x07},       //  Char p      Width 7     112
    {0x00,0x00,0x00,0x7C,0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x07},       //  Char q      Width 7     113
    {0x00,0x00,0x00,0xF0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x05},       //  Char r      Width 5     114
    {0x00,0x00,0x00,0x78,0xCC,0xF0,0x3C,0xCC,0x78,0x00,0x07},       //  Char s      Width 7     115
    {0x00,0x40,0xC0,0xE0,0xC0,0xC0,0xC0,0xC0,0x60,0x00,0x04},       //  Char t      Width 4     116
    {0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0x7C,0x00,0x07},       //  Char u      Width 7     117
    {0x00,0x00,0x00,0xD8,0xD8,0xD8,0xD8,0x70,0x70,0x00,0x06},       //  Char v      Width 6     118
    {0x00,0x00,0x00,0xC6,0xC6,0xD6,0x54,0x6C,0x6C,0x00,0x08},       //  Char w      Width 8     119
    {0x00,0x00,0x00,0xD8,0xD8,0x70,0x70,0xD8,0xD8,0x00,0x06},       //  Char x      Width 6     120
    {0x00,0x00,0x00,0xDC,0xD8,0xD8,0x70,0x70,0xE0,0x00,0x07},       //  Char y      Width 7     121
    {0x00,0x00,0x00,0xF8,0x18,0x30,0x60,0xC0,0xF8,0x00,0x06},       //  Char z      Width 6     122
    {0x00,0x30,0x60,0x60,0x60,0xC0,0x60,0x60,0x60,0x30,0x05},       //  Char {      Width 5     123
    {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x02},       //  Char |      Width 2     124
    {0x00,0xC0,0x60,0x60,0x60,0x30,0x60,0x60,0x60,0xC0,0x05},       //  Char }      Width 5     125
    {0x00,0x00,0x00,0x00,0x68,0x90,0x00,0x00,0x00,0x00,0x06},       //  Char ~      Width 6     126
    {0x00,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0x00,0x05}        //  Char []     Width 5     127
};


Display::Display(GLCD &glcd):
_glcd(glcd)
{
    /* <LDRA Phase code 9S> <Assignment operation in expression.: Resolved.>
     * <Verified by: Nikhil Mhaske> <9/9/2021> */
    curX = 0U;
    curY = 0U;
    curFont = FONT_ARIAL;
}

void Display::drawHorizontalLine(unsigned int x1, unsigned int y, unsigned int x2)
{
    unsigned int x;
    for(x = x1; x <= x2; x++)
    {
        _glcd.SetUnsetPixel((uint8_t)x, (uint8_t)y, GLCD::BSP_GLCD_SET);
    }
}

void Display::drawVerticalLine(unsigned int x, unsigned int y1, unsigned int y2)
{
    unsigned int y;
    for(y = y1; y <= y2; y++)
    {
        _glcd.SetUnsetPixel((uint8_t)x, (uint8_t)y, GLCD::BSP_GLCD_SET);
    }
}

void Display::clearRectangularSection(unsigned int x1, unsigned int x2, unsigned int y1, unsigned int y2)
{
    unsigned int x, y;
    for(y = y1; y <= y2; y++)
    {
        for(x = x1; x <= x2; x++)
        {
            _glcd.SetUnsetPixel((uint8_t)x, (uint8_t)y, GLCD::BSP_GLCD_UNSET);
        }
    }
}

void Display::drawRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
    drawHorizontalLine(x1, y1, x2);
    drawHorizontalLine(x1, y2, x2);
    drawVerticalLine(x1, y1, y2);
    drawVerticalLine(x2, y1, y2);
}

void Display::drawRectangle()
{
    drawRectangle(0, 0, (GLCD_MAX_COLUMN_NO - 1), ((GLCD_MAX_PAGE_NO * GLCD_BITS_PER_PAGE) - 1));
}

void Display::gotoxy (unsigned int x, unsigned int y)
{
    curX = (uint8_t)x;
    curY = (uint8_t)y;
}

void Display::setFont (FONT_t font)
{
    curFont = font;
}

static char sanitize (char ch)
{
    // we expect ch to be in the range 0x20 through 0x7f
    // i.e. one of the "printable" characters.
    if(ch < 0x20)
    {
        return 0;
    }
    else
    {
        return(ch - 0x20);
    }
}
void Display::printChar(char ch, FONT_t font, bool reverseVideo)
{
    const uint8_t *fontPtr;
    uint8_t width, col, row, mask, mask2;
    // first sanitize ch:
    ch = sanitize(ch);
    // now ch will be in the range 0 through 0x5f
    // i.e. 0 through 95
    if(font == FONT_ARIAL)
    {
        width = gau8FontArialBold[(uint8_t)ch][10];
        fontPtr = &(gau8FontArialBold[(uint8_t)ch][0]);

    }
    else
    {
        // it must be FONT_VERDANA then:
        width = gau8FontVerdana[(uint8_t)ch][10];
        fontPtr = &(gau8FontVerdana[(uint8_t)ch][0]);
    }
    // height is fixed at 10 rows:
    for(row = 0; row < 10; row++)
    {
        mask = 0x80;
        if(reverseVideo)
        {
            mask2 = 0x80;
        }
        else
        {
            mask2 = 0;
        }
        // it is assumed that width is <= 8
        for(col = 0; col < width; col++)
        {
            if((fontPtr[row] & mask) ^ mask2)
            {
                _glcd.SetUnsetPixel((curX + col), (curY + row), GLCD::BSP_GLCD_SET);
            }
            else
            {
                _glcd.SetUnsetPixel((curX + col), (curY + row), GLCD::BSP_GLCD_UNSET);
            }
            mask >>= 1;
            mask2 >>= 1;
        }
    }
    // now advance curX suitably
    curX += width;
    //if(curX >= (GLCD_MAX_COLUMN_NO))
    if(curX > (122))
    {
        //curX = GLCD_MAX_COLUMN_NO - 1;
        curX = 1;
        curY = curY + 12;
    }
}
void Display::printChar(char ch, FONT_t font)
{
    printChar(ch, font, false);
}
void Display::printChar(char ch)
{
    printChar(ch, curFont);
}

/* <LDRA Phase code 101S> <Function return type inconsistent.: Resolved.>
 * <Verified by: Nikhil Mhaske> <11/9/2021> */
uint8_t Display::getCharWidth(char ch, FONT_t font)
{
    ch = sanitize(ch);
    if(font == FONT_ARIAL)
    {
        return gau8FontArialBold[(uint8_t)ch][10];
    }
    else
    {
        // it must be FONT_VERDANA then:
        return gau8FontVerdana[(uint8_t)ch][10];
    }
}

/* <LDRA Phase code 101S> <Function return type inconsistent.: Resolved.>
 * <Verified by: Nikhil Mhaske> <11/9/2021> */
uint8_t Display::getCharWidth(char ch)
{
    return getCharWidth(ch, curFont);
}

void Display::printStringLeftAligned (char *str, FONT_t font, bool reverseVideo)
{
    while(*str)
    {
        printChar(*str, font, reverseVideo);
        str++;
    }
}
void Display::printStringLeftAligned (char *str, FONT_t font)
{
    printStringLeftAligned(str, font, false);
}
void Display::printStringLeftAligned (char *str)
{
    printStringLeftAligned(str, curFont);
}


void Display::printImage (uint8_t *pImage, uint8_t u8ImageSizeInColumns,
                                       uint8_t u8ImageSizeInRows, uint8_t u8Row, uint8_t u8Column)
{
    uint8_t u8Hight, u8Width, u8ColumnJump, u8Hight1, u8BitLocation, u8DataByte;

    for(u8Hight = 0; u8Hight < u8ImageSizeInColumns; u8Hight++)
    {
        u8ColumnJump = u8Hight*8;
        for(u8Width=0; u8Width < u8ImageSizeInRows; u8Width++)
        {
            u8DataByte = *pImage;
            for(u8Hight1 = 0; u8Hight1 < u8ImageSizeInColumns; u8Hight1++)
            {
                //  logic to glow individual pixels
                for(u8BitLocation = 0; u8BitLocation < 8; u8BitLocation++)
                {
                    if(u8DataByte & (0x01U << (7 - u8BitLocation)))
                    {
                        _glcd.SetUnsetPixel((uint8_t)(u8Column + u8BitLocation + u8ColumnJump), (uint8_t)(u8Row + u8Width)
                                            , GLCD::BSP_GLCD_SET);
                    }
                }
            }
            pImage++;  //  Get next data byte
        }
    }
}

void Display::ClearScreen()
{
    _glcd.ClearScreen();
}

void Display::printStringCenterAligned (char *str)
{
    printStringCenterAligned(str, curFont);
}
void Display::printStringCenterAligned (char *str, FONT_t font)
{
    printStringCenterAligned(str, font, false);
}
void Display::printStringCenterAligned (char *str, FONT_t font, bool reverseVideo)
{
    curX = curX -FindStringWidth(str,font)/2;
    gotoxy(curX, curY);
    while(*str)
    {
       printChar(*str, font, reverseVideo);
       str++;
    }
}


void Display::printStringRightAligned (char *str)
{
    printStringRightAligned(str, curFont);
}
void Display::printStringRightAligned (char *str, FONT_t font)
{
    printStringRightAligned(str, font, false);
}
//volatile uint8_t length, width=0;
uint8_t Display::FindStringWidth(char* str, FONT_t font)
{
    uint8_t i;
    uint8_t length, width=0;
    length = (uint8_t)strlen(str);
    for(i=0; i<length ;i++)
    {
        width +=(uint8_t)getCharWidth(*str, font);
        str++;
    }
    return width;
}

void Display::printStringRightAligned (char *str, FONT_t font, bool reverseVideo)
{
    curX = curX - FindStringWidth(str,font);
    gotoxy(curX, curY);
    while(*str)
    {
       printChar(*str, font, reverseVideo);
       str++;
    }
}
